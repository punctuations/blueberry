on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # [!] we need to checkout with tags and commit history
      - name: Output latest
        id: commits
        run: |
          echo "::set-output name=latest::$(git describe --tags)"
      - name: Get Commits since last Release
        id: changes
        uses: simbo/changes-since-last-release-action@v1
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: |
            ## 📋 Changelog:
            
            Commits since ${{ steps.changes.outputs.last-tag }}:
            ${{ steps.changes.outputs.log }}
            
            <sub>This release is automatically generated.</sub>
          draft: false
          prerelease: false
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      latest: ${{ steps.commits.outputs.latest }}

  compile_exec:
    needs: ['release']
    name: Compile to executables
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - os: ubuntu-latest
          - os: macos-latest
          - os: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # [!] we need to checkout with tags and commit history

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Install dependencies on Ubuntu
        if: startsWith(matrix.config.os, 'ubuntu')
        run: sudo apt-get update && sudo apt-get install cmake pkg-config libgtk-3-dev

      - name: Build with Cargo for ${{ matrix.config.os }}
        if: startsWith(matrix.config.os, 'ubuntu')
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-unknown-linux-gnu
          
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{with.target}}
        
        if: startsWith(matrix.config.os, 'macos') 
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: aarch64-apple-darwin # will probably have to change this around to accomodate for M1 & M2
        
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{with.target}}

        if: startsWith(matrix.config.os, 'windows') # not sure if a target is needed here
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-pc-windows-msvc

        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{with.target}}

      - name: Copy files to be compressed
        run: |
          cp README.md ./dist
          cp LICENSE ./dist
          mv ./dist ./popcorn-${{ matrix.config.os }}
      - name: Archive Files
        if: ${{ matrix.config.os != 'windows-latest' }}
        uses: thedoctor0/zip-release@main
        with:
          type: 'tar'
          path: './popcorn-${{ matrix.config.os }}'
          filename: 'popcorn.tar.gz'
      - name: Archive Windows Files
        if: ${{ matrix.config.os == 'windows-latest' }}
        uses: thedoctor0/zip-release@main
        with:
          type: 'zip'
          path: './popcorn-${{ matrix.config.os }}'
          filename: 'popcorn.zip'
      - name: Upload Release Asset
        if: ${{ matrix.config.os != 'windows-latest' }}
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./popcorn.tar.gz
          asset_name: popcorn-${{ matrix.config.os }}.tar.gz
          asset_content_type: application/gzip
      - name: Upload Release Asset Windows
        if: ${{ matrix.config.os == 'windows-latest' }}
        id: upload-release-asset-windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./popcorn.zip
          asset_name: popcorn-${{ matrix.config.os }}.zip
          asset_content_type: application/zip
      - name: Generate SHA256 ubuntu
        id: ubuntu-sha256
        if: ${{ matrix.config.os == 'ubuntu-latest' }}
        run: |
          echo "::set-output name=sha::$(openssl sha256 -binary < ./popcorn.tar.gz | xxd -p)"
      - name: Generate SHA256 macos
        id: macos-sha256
        if: ${{ matrix.config.os == 'macos-latest' }}
        run: |
          echo "::set-output name=sha::$(openssl sha256 -binary < ./popcorn.tar.gz | xxd -p)"
    outputs:
      ubuntu-256: ${{ steps.ubuntu-sha256.outputs.sha }}
      macos-256: ${{ steps.macos-sha256.outputs.sha }}

  update_homebrew:
    needs: ['compile_exec', 'release']
    name: Update formulae
    runs-on: ubuntu-latest
    steps:
      - name: clone repo
        run: |
          git clone https://github.com/punctuations/homebrew-tap
      - name: modify file
        run: |
          echo -e '# typed: false\n# frozen_string_literal: true\n\nclass Popcorn < Formula\n  desc "🍿  A command-line tool for command-line tools."\n  homepage "https://github.com/punctuations/popcorn"\n  version "${{ needs.release.outputs.latest }}"\n\n  on_macos do\n    url "https://github.com/punctuations/popcorn/releases/download/${{ needs.release.outputs.latest }}/popcorn-macos-latest.tar.gz"\n    sha256 "${{ needs.compile_exec.outputs.macos-256 }}"\n\n    def install\n      bin.install "popcorn"\n    end\n  end\n\n  on_linux do\n    url "https://github.com/punctuations/popcorn/releases/download/${{ needs.release.outputs.latest }}/popcorn-ubuntu-latest.tar.gz"\n    sha256 "${{ needs.compile_exec.outputs.ubuntu-256 }}"\n\n    def install\n      bin.install "popcorn"\n    end\n  end\nend' > homebrew-tap/popcorn.rb
      - name: Update formulae
        uses: dmnemec/copy_file_to_another_repo_action@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source_file: './homebrew-tap/popcorn.rb'
          destination_repo: 'punctuations/homebrew-tap'
          user_email: 'matt@dont-ping.me'
          user_name: 'punctuations'
          commit_message: 'ci: bump popcorn to ${{ needs.release.outputs.latest }}'